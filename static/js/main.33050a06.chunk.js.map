{"version":3,"sources":["logo.svg","Keyboard.js","ScoreCounter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ALPHABET","Keyboard","props","state","used","Array","from","fill","this","setState","letter","index","onClick","className","map","key","Component","EMOJIS","ScoreCounter","score","sc","length","DICT","App","handleKeyboardClick","word","mask","count","goodMove","updateMask","updateWin","updateCountAndLoose","reset","getRandomWord","won","loose","getRandomInt","max","Math","floor","random","str","i","every","e","getWordToPrint","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,yOCKrCC,G,YAAW,8BA4CFC,E,kDAzCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAMC,MAAMC,KAAKN,GAAUO,MAAK,IAHrB,E,oDAQfC,KAAKC,SAAS,CACVL,KAAMC,MAAMC,KAAKN,GAAUO,MAAK,O,8BAIhCG,EAAQC,GAAQ,IACZC,EAAaJ,KAAKN,MAAlBU,QACAR,EAASI,KAAKL,MAAdC,KACHA,EAAKO,KACNP,EAAKO,IAAS,EACdH,KAAKC,SAAS,CAAEL,KAAMA,IACtBQ,EAAQF,M,+BAIN,IAAD,OACGN,EAASI,KAAKL,MAAdC,KACR,OACI,yBAAKS,UAAU,YACdR,MAAMC,KAAKN,GAAUc,KAAI,SAACJ,EAAQC,GAAT,OACtB,0BAAME,UAAWT,EAAKO,GAAS,YAAc,OAAQC,QAAS,kBAAM,EAAKA,QAAQF,EAAQC,IAAQI,IAAKJ,GACjGD,W,GA9BEM,aCFjBC,G,MAAS,CAAC,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,eAAK,iBAalEC,EAXM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUC,UAAV,MAAeD,GAASF,EAAOI,OAASJ,EAAOI,OAAS,EAAIF,EAA5D,SACjB,6BACI,4BAAKF,EAAOG,MCHdE,EAAO,CAAC,YAAa,SAAU,aAAc,QAAS,aAAc,QAAS,UAqGpEC,E,kDAhGb,WAAYrB,GAAQ,IAAD,uBACjB,cAAMA,IA+BRsB,oBAAsB,SAAAd,GAAW,IAAD,EACA,EAAKP,MAA3BsB,EADsB,EACtBA,KAAMC,EADgB,EAChBA,KAAMC,EADU,EACVA,MAChBC,EAAW,EAAKC,WAAWJ,EAAMf,EAAQgB,GAC7C,EAAKI,UAAUJ,GACf,EAAKK,oBAAoBH,EAAUD,IApClB,EAmEnBK,MAAQ,WACN,IAAMP,EAAO,EAAKQ,gBAClB,EAAKxB,SAAS,CACZgB,KAAMA,EACNC,KAAM,IAAIrB,MAAMoB,EAAKJ,QAAQd,MAAK,GAClC2B,KAAK,EACLP,MAAO,EACPQ,OAAO,KAvET,IAAMV,EAAO,EAAKQ,gBAHD,OAKjB,EAAK9B,MAAQ,CACXsB,KAAMA,EACNC,KAAM,IAAIrB,MAAMoB,EAAKJ,QAAQd,MAAK,GAClC2B,KAAK,EACLP,MAAO,EACPQ,OAAO,GAVQ,E,4DAejB,OAAOb,EAAKd,KAAK4B,aAAad,EAAKD,W,mCAGxBgB,GACX,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,K,uCAMlC,IAHgB,IAAD,EACQ7B,KAAKL,MAApBsB,EADO,EACPA,KAAMC,EADC,EACDA,KACVe,EAAM,GACDC,EAAI,EAAGA,EAAIjB,EAAKJ,OAAQqB,IAC/BD,GAAOf,EAAKgB,GAAKjB,EAAKiB,GAAK,IAE7B,OAAOD,I,iCAWEhB,EAAMf,EAAQgB,GAEvB,IADA,IAAIE,GAAW,EACNc,EAAI,EAAGA,EAAIjB,EAAKJ,OAAQqB,IAC3BjB,EAAKiB,KAAOhC,GAAWgB,EAAKgB,KAC9BhB,EAAKgB,IAAK,EACVd,GAAW,EACXpB,KAAKC,SAAS,CAAEiB,KAAMA,KAG1B,OAAOE,I,0CAGWA,EAAUD,GACvBC,IACHpB,KAAKC,SAAS,CAAEkB,MAAOA,EAAQ,IAC3BA,EAAQ,GA1DA,IA2DVnB,KAAKC,SAAS,CAAE0B,OAAO,O,gCAKnBT,GACJA,EAAKiB,OAAM,SAAAC,GAAC,OAAU,IAANA,MAClBpC,KAAKC,SAAS,CAAEyB,KAAK,M,+BAgBf,IAAD,EACuB1B,KAAKL,MAA3B+B,EADD,EACCA,IAAKP,EADN,EACMA,MAAOQ,EADb,EACaA,MACpB,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAcM,MAAOQ,IACrB,4BAAKnB,KAAKqC,oBAEVX,IAAQC,GAAS,kBAAC,EAAD,CAAUvB,QAASJ,KAAKgB,uBACzCU,GAAOC,IAAU,4BAAQtB,UAAU,WAAWD,QAASJ,KAAKwB,OAA3C,YACnB,yBAAKc,IAAKC,IAAMlC,UAAU,WAAWmC,IAAI,e,GA3FjChC,aCGEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.33050a06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Keyboard.css'\r\n\r\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n\r\nclass Keyboard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            used: Array.from(ALPHABET).fill(false),\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.setState({\r\n            used: Array.from(ALPHABET).fill(false),\r\n        })\r\n    }\r\n\r\n    onClick(letter, index) {\r\n        const { onClick }  = this.props\r\n        const { used } = this.state\r\n        if (!used[index]) {\r\n            used[index] = true\r\n            this.setState({ used: used })\r\n            onClick(letter)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { used } = this.state\r\n        return ( \r\n            <div className=\"keyboard\">\r\n            {Array.from(ALPHABET).map((letter, index) =>\r\n                <span className={used[index] ? 'card used' : 'card'} onClick={() => this.onClick(letter, index)} key={index}>\r\n                    {letter}\r\n                </span>\r\n            )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nKeyboard.propTypes = {\r\n    onClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Keyboard\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './ScoreCounter.css'\n\nconst EMOJIS = ['😍','🥰','😃','😀','🙂','🤨','😒','😞','😔','😩','🥺','😢','😭','☠️']\n\nconst ScoreCounter = ({ score, sc = score >= EMOJIS.length ? EMOJIS.length - 1 : score}) => (\n    <div>\n        <h1>{EMOJIS[sc]}</h1>\n    </div>\n)\n\n\nScoreCounter.propTypes = {\n    score: PropTypes.number.isRequired\n}\n\nexport default ScoreCounter\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Keyboard from './Keyboard'\nimport ScoreCounter from './ScoreCounter'\n\nconst DICT = [\"ALAMBIQUE\", \"CASTOR\", \"ORDINATEUR\", \"CHIEN\", \"SMARTPHONE\", \"ECOLE\", \"GOURDE\"]\nconst MAX_COUNT = 13\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    const word = this.getRandomWord()\n\n    this.state = {\n      word: word,\n      mask: new Array(word.length).fill(false),\n      won: false,\n      count: 0,\n      loose: false,\n    }\n  }\n\n  getRandomWord() {\n    return DICT[this.getRandomInt(DICT.length)]\n  }\n\n  getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  getWordToPrint() {\n    const { word, mask } = this.state\n    let str = \"\"\n    for (var i = 0; i < word.length; i++) {\n      str += mask[i] ? word[i] : \"_\"\n    }\n    return str\n  }\n\n  // Arrow for binding this\n  handleKeyboardClick = letter => {\n    const { word, mask, count } = this.state\n    let goodMove = this.updateMask(word, letter, mask);\n    this.updateWin(mask);\n    this.updateCountAndLoose(goodMove, count);\n  }\n\n  updateMask(word, letter, mask) {\n    let goodMove = false\n    for (var i = 0; i < word.length; i++) {\n      if (word[i] === letter && !mask[i]) {\n        mask[i] = true;\n        goodMove = true;\n        this.setState({ mask: mask });\n      }\n    }\n    return goodMove;\n  }\n\n  updateCountAndLoose(goodMove, count) {\n    if (!goodMove) {\n      this.setState({ count: count + 1 });\n      if (count + 1 >= MAX_COUNT) {\n        this.setState({ loose: true });\n      }\n    }\n  }\n\n  updateWin(mask) {\n    if (mask.every(e => e === true)) {\n      this.setState({ won: true });\n    }\n  }\n\n  // Arrow for binding\n  reset = () => {\n    const word = this.getRandomWord()\n    this.setState({\n      word: word,\n      mask: new Array(word.length).fill(false),\n      won: false,\n      count: 0,\n      loose: false,\n    })\n  }\n\n  render() {\n    const { won, count, loose } = this.state\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"word\">\n            <ScoreCounter score={count}></ScoreCounter>\n            <h1>{this.getWordToPrint()}</h1>\n          </div>\n          {!won && !loose && <Keyboard onClick={this.handleKeyboardClick}></Keyboard>}\n          {(won || loose) && <button className=\"button_a\" onClick={this.reset}>New Game</button>}\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}